alias currentPID S0;
currentPID = (PTBR - 1024) / 8;  //since page_tables start from 1024 and are of 8 words each

alias currentPCB S1;
currentPCB = READY_LIST + 32 * currentPID;  //since in ready_list all the pcb's will be there and are of size 32 word each

[ currentPCB + 1 ] = 1; // moving the currently running process into ready state

[ currentPCB + 2 ] = BP; //saving the register values of the process so that when we do the switch again we can load them back 
[ currentPCB + 3 ] = SP - 1; //why ?????????

alias physicalSP S2;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);  
//physical address of the base of the logical page is found in the per process page tables and the offset is just phyical % 512
//(SP/512) is to find the logical page and multiply by two because each entry in page table is 2 words

[ currentPCB + 4 ] = [ physicalSP ]; // Save IP of current process in the PCB from the stack

[ currentPCB + 5 ] = PTBR;
[ currentPCB + 6 ] = PTLR ; 

[ currentPCB + 7 ] = R0; 
[ currentPCB + 8 ] = R1; 
[ currentPCB + 9 ] = R2; 
[ currentPCB + 10] = R3; 
[ currentPCB + 11] = R4; 
[ currentPCB + 12] = R5; 
[ currentPCB + 13] = R6;  
[ currentPCB + 14] = R7; 

alias newPCB S2;
newPCB = READY_LIST;
if (currentPID == 0) then
	newPCB = READY_LIST + 32 * 1;
else
	newPCB = READY_LIST + 32*0;
endif;
 

BP = [newPCB + 2];
SP = [newPCB + 3];
PTBR = [newPCB+5];
PTLR = [newPCB + 6];
R0 = [newPCB+7];
R1 = [newPCB+8];
R2 = [newPCB+9];
R3 = [newPCB+10];
R4 = [newPCB+11];
R5 = [newPCB+12];
R6 = [newPCB+13];
R7 = [newPCB+14];

SP = SP + 1;
alias newphysicalSP S3;
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[ newphysicalSP ] = [ newPCB + 4 ]; // Stores IP field value of PCB on the stack

[newPCB + 1] = 2;
ireturn;
